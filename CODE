
#include <pthread.h>
#include <stdio.h>

#define NUM_THREADS 10
#define CHUNK_SIZE 1000

// Structure to hold thread arguments
typedef struct {
    int start;
    int end;
    long sum;
} ThreadData;

// Function that each thread will execute
void* calculate_sum(void* arg) {
    ThreadData* data = (ThreadData*) arg;
    long sum = 0;
    for (int i = data->start; i <= data->end; i++) {
        sum += i;
    }
    data->sum = sum;
    pthread_exit(0);
}

int main() {
    pthread_t threads[NUM_THREADS];
    ThreadData thread_data[NUM_THREADS];
    long total_sum = 0;
    
    // Create threads
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_data[i].start = i * CHUNK_SIZE;
        thread_data[i].end = (i + 1) * CHUNK_SIZE - 1;
        thread_data[i].sum = 0;
        pthread_create(&threads[i], NULL, calculate_sum, (void*) &thread_data[i]);
    }
    
    // Join threads and collect results
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
        total_sum += thread_data[i].sum;
    }
    
    printf("Total sum from 0 to 9999: %ld\n", total_sum);
    
    return 0;
}
